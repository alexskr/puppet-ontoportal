<% |
  String $triple_store,
  Boolean $include_api,
  Boolean $include_ui
| -%>
#!/bin/bash
# Unified control script for OntoPortal stack
# Generated by Puppet, do not modify

RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YEL=$(tput setaf 3)
NC=$(tput sgr0)

require_root() {
  if (( EUID != 0 )); then
    echo "Please run with \"sudo \$0\""
    exit 1
  fi
}

<%
  # Base service groups
  $redis_services = [
    'redis-server-goo_cache.service',
    'redis-server-http_cache.service',
    'redis-server-persistent.service'
  ]

  $api_services = [
    'mgrep.service',
    'solr.service',
    'ncbo_cron.service',
    'unicorn.service'
  ]

  $ui_services = [
    'ui.service',
    'memcached.service'
  ]

  $shared_services = ['tomcat.service']
  $triple_store_services = [$triple_store]
  $nginx_services = ['nginx.service']

  # Conditional parts
  $api_part = $include_api ? { true => $api_services, false => [] }
  $ui_part = $include_ui ? { true => $ui_services, false => [] }
  $nginx_part = ($include_api or $include_ui) ? { true => $nginx_services, false => [] }

  # Full middle services (API + UI + shared)
  $middle_services = $shared_services + $api_part + $ui_part

  # Start: triple_store → redis → middle → nginx
  $start_services = $triple_store_services + $redis_services + $middle_services + $nginx_part

  # Stop: nginx → reverse(middle) → redis → triple_store
  $stop_services = $nginx_part + $middle_services.reverse + $redis_services + $triple_store_services

  # Bash-friendly output strings
  $start_str = $start_services.map |$s| { "\"${s}\"" }.join(' ')
  $stop_str  = $stop_services.map |$s| { "\"${s}\"" }.join(' ')
  $redis_str = $redis_services.map |$s| { "\"${s}\"" }.join(' ')
-%>

START_ORDER=(<%= $start_str %>)
STOP_ORDER=(<%= $stop_str %>)
REDIS_SERVICES=(<%= $redis_str %>)

start_services() {
  require_root
  echo "Starting OntoPortal services..."
  local STATUS=0
  for service in "${START_ORDER[@]}"; do
    echo "→ starting $service"
    if ! systemctl start "$service"; then
      echo -e "${RED}✗ Failed to start $service${NC}"
      STATUS=$((STATUS + 1))
    fi
  done
  if [[ $STATUS -ne 0 ]]; then
    echo -e "${RED}Some services failed to start ($STATUS).${NC}"
  else
    echo -e "${GRN}All services started successfully.${NC}"
  fi
  return $STATUS
}

stop_services() {
  require_root
  echo "Stopping OntoPortal services..."
  local STATUS=0
  for service in "${STOP_ORDER[@]}"; do
    echo "→ stopping $service"
    if ! systemctl stop "$service"; then
      echo -e "${RED}✗ Failed to stop $service${NC}"
      STATUS=$((STATUS + 1))
    fi
  done
  if [[ $STATUS -ne 0 ]]; then
    echo -e "${RED}Some services failed to stop ($STATUS).${NC}"
  else
    echo -e "${GRN}All services stopped successfully.${NC}"
  fi
  return $STATUS
}

restart_services() {
  stop_services || true
  start_services
  return $?
}

check_redis_instance() {
  local service="$1"
  local port=$(systemctl show "$service" -p ExecStop | grep -o '\-p [0-9]\+' | awk '{print $2}')

  if [ -n "$port" ]; then
    echo
    echo "========== Redis: $service (port $port) =========="
    redis-cli -p "$port" info 2>/dev/null | grep -E '^(uptime_in_seconds|connected_clients|used_memory_human|total_commands_processed):'
  else
    echo "Could not determine Redis port for $service"
  fi
}

clear_caches() {
  require_root
  echo "Clearing OntoPortal caches..."
  local cache_services=(
    memcached.service
    redis-server-goo_cache.service
    redis-server-http_cache.service
  )
  local STATUS=0
  for service in "${cache_services[@]}"; do
    echo "→ restarting $service"
    if ! systemctl restart "$service"; then
      echo -e "${RED}✗ Failed to restart $service${NC}"
      STATUS=$((STATUS + 1))
    fi
  done

  if [[ $STATUS -ne 0 ]]; then
    echo -e "${RED}Some cache services failed to restart.${NC}"
  else
    echo -e "${GRN}All cache services restarted successfully.${NC}"
  fi
  return $STATUS
}

status_services() {
  VERBOSE=false
  if [[ "${1:-}" == "-v" ]]; then
    VERBOSE=true
  fi

  STATUS=0
  for service in "${START_ORDER[@]}"; do
    isactive=$(systemctl is-active "$service" 2>/dev/null)
    case "$isactive" in
      active)   COLOR=$GRN ;;
      inactive) COLOR=$YEL ;;
      failed)   COLOR=$RED ;;
      *)        COLOR=$NC ;;
    esac
    echo -e "${COLOR}$(printf '%-35s %s' "$service" "$isactive")${NC}"
    [[ "$isactive" != "active" ]] && STATUS=$((STATUS + 1))
  done

  if $VERBOSE; then
    echo ""
    echo "---- SOLR status ----"
    curl -s "http://localhost:8983/solr/admin/cores?action=STATUS"
    echo ""

    for redis_service in "${REDIS_SERVICES[@]}"; do
      check_redis_instance "$redis_service"
    done
  fi

  return $STATUS
}

case "${1:-}" in
  start)
    start_services
    exit $?
    ;;
  stop)
    stop_services
    exit $?
    ;;
  restart)
    restart_services
    exit $?
    ;;
  status)
    shift
    status_services "$@"
    exit $?
    ;;
  clear-cache)
    clear_caches
    exit $?
    ;;
  *)
    echo "Usage: sudo \$0 {start|stop|restart|status [-v]|clear-cache}"
    exit 1
    ;;
esac

